
#include("../../utils.syntran");
#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1_brute(): str
{
	let sum_ = 0'i64;

	let nlines = countln_(filename);
	let ninst = nlines - 1;

	let f = open(filename, "r");
	let str_ = readln(f);
	let iip = parse_i32(str_[3: len(str_)]);

	//println("iip = ", iip);

	let program = [""; ninst];
	for i in [0: ninst]
	{
		program[i] = readln(f);
	}
	close(f);
	//println("program = ", program);

	let reg0 = 0;
	while true
	{

	let nregs = 6;
	let regs = [0; nregs];
	regs[0] = reg0;
	println("reg0 = ", reg0);

	let k = 0;
	while true
	{
		//println("str_ = ", str_);
		if (not in_bounds([0], [regs[iip]], [ninst]))
		{
			sum_ = reg0;
			break;
		}
		//if (k > 1000) break;
		//if (k > 4000) break;
		if (k > 16000) break;

		let line = program[regs[iip]];
		let nums = read_i32s(line);

		let a = nums[0];
		let b = nums[1];
		let c = nums[2];

		let op = line[0: 4];

		//println("op, ip, k = ", op, " ", regs[iip], " ", k);
		//println("regs = ", regs);
		//println();

		if op == "addr"
			regs[c] = regs[a] + regs[b];
		else if op == "addi"
			regs[c] = regs[a] + b;
		else if op == "mulr"
			regs[c] = regs[a] * regs[b];
		else if op == "muli"
			regs[c] = regs[a] * b;
		else if op == "banr"
			regs[c] = regs[a] & regs[b];
		else if op == "bani"
			regs[c] = regs[a] & b;
		else if op == "borr"
			regs[c] = regs[a] | regs[b];
		else if op == "bori"
			regs[c] = regs[a] | b;
		else if op == "setr"
			regs[c] = regs[a];
		else if op == "seti"
			regs[c] = a;
		else if op == "gtir"
		{
			if (a > regs[b])  regs[c] = 1;
			else              regs[c] = 0;
		}
		else if op == "gtri"
		{
			if (regs[a] > b)  regs[c] = 1;
			else              regs[c] = 0;
		}
		else if op == "gtrr"
		{
			if (regs[a] > regs[b])  regs[c] = 1;
			else                    regs[c] = 0;
		}
		else if op == "eqir"
		{
			if (a == regs[b])  regs[c] = 1;
			else               regs[c] = 0;
		}
		else if op == "eqri"
		{
			if (regs[a] == b)  regs[c] = 1;
			else               regs[c] = 0;
		}
		else if op == "eqrr"
		{
			if (regs[a] == regs[b])  regs[c] = 1;
			else                     regs[c] = 0;
		}
		else
		{
			println("Error: bad op """, op, """");
			exit(-1);
		}
		regs[iip] += 1;
		k += 1;
	}

	if (sum_ > 0) break;
	reg0 += 1;

	}
	//sum_ = regs[0];

	println("part 1 = ", sum_);
	return str(sum_);
}

fn run_activation_system(magic_number: i32, is_part_1: bool): i32
{
	// Definitely had to cheat today.  Source:
	//
	//     https://www.reddit.com/r/adventofcode/comments/a86jgt/comment/ec8lyck/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button

	let seen = new_dict_i64();
	let c = 0;
	let last_unique_c = -1;

	while true
	{
		let a = c | 65536;
		c = magic_number;
		while true
		{
			c = (((c + (a & 255)) & 16777215) * 65899) & 16777215;
			if a < 256
			{
				if is_part_1
					return c;
				else
				{
					let try_c = get_dict_i64(&seen, str(c));
					if try_c < 0
					{
						set_dict_i64(&seen, str(c), 1'i64);
						last_unique_c = c;
						break;
					}
					else
						return last_unique_c;
				}
			}
			else
				a /= 256;
		}
	}
}

fn part12(): str
{
	let lines = readlns_(filename);
	//println("lines = ", lines);

	let words = split_(lines[8], " ");
	//println("words = ", words);

	let magic_number = parse_i32(words[1]);
	//println("magic_number = ", magic_number);

	let p1 = str(run_activation_system(magic_number, true));
	println("part 1 = ", p1);
	let p2 = str(run_activation_system(magic_number, false));
	println("part 2 = ", p2);

	return p1 + ":" + p2;
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2018/21");

	// Expect 7129803:12284643
	let p12 = part12();

	println("Ending AOC syntran main");
	println();
	return p12;
}

//==============================================================================

return main();

//==============================================================================

