
#include("../../utils.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

let MOVING   = "|";
let STANDING = "~";

fn part12(): str
{
	let sum_ = 0'i64;

	// First pass: get bounds
	let xmin =  2_000_000_000;
	let ymin =  2_000_000_000;
	let xmax = -2_000_000_000;
	let ymax = -2_000_000_000;

	let f = open(filename, "r");
	let str_ = readln(f);
	while not eof(f)
	{
		//println("str_ = ", str_);

		let nums = read_i32s(str_);

		if str_[0] == "x"
		{
			let x  = nums[0];
			let y0 = nums[1];
			let y1 = nums[2];

			xmin = min(xmin, x);
			xmax = max(xmax, x);

			ymin = min(ymin, y0);
			ymax = max(ymax, y0);
			ymin = min(ymin, y1);
			ymax = max(ymax, y1);
		}
		else
		{
			let y  = nums[0];
			let x0 = nums[1];
			let x1 = nums[2];

			ymin = min(ymin, y);
			ymax = max(ymax, y);

			xmin = min(xmin, x0);
			xmax = max(xmax, x0);
			xmin = min(xmin, x1);
			xmax = max(xmax, x1);
		}

		str_ = readln(f);
	}
	close(f);

	// Water spring/source (it might actually be above ymin but we're supposed
	// to ignore points up there)
	let xs = 500;
	let ys = ymin;

	// Pad x (but not y) by 1.  Water may flow one past outer bound before
	// padding
	xmin -= 1;
	xmax += 1;

	// Pad upper bounds because input is inclusive
	xmax += 1;
	ymax += 1;

	println("x in ", [xmin, xmax]);
	println("y in ", [ymin, ymax]);

	let dx = xmax - xmin;
	let dy = ymax - ymin;

	let g = ["."; dx, dy];

	// Second pass: save

	f = open(filename, "r");
	str_ = readln(f);
	while not eof(f)
	{
		//println("str_ = ", str_);

		let nums = read_i32s(str_);

		if str_[0] == "x"
		{
			let x  = nums[0];
			let y0 = nums[1];
			let y1 = nums[2];
			g[x - xmin, [y0: y1+1] - ymin] = "#";
		}
		else
		{
			let y  = nums[0];
			let x0 = nums[1];
			let x1 = nums[2];
			g[[x0: x1+1] - xmin, y - ymin] = "#";
		}
		str_ = readln(f);
	}
	close(f);
	//print_char_mat(&g);

	let x = xs - xmin;  let y = ys + 1 - ymin;
	g[x, y-1] = "|";

	dfs(x, y, &g, MOVING);

	sum_ = count(g == "|") + count(g == "~");

	println("sum_ = ", sum_);
	print_char_mat(&g);

	println("part 1 = ", sum_);
	let p2 = count(g == "~");
	println("part 2 = ", p2);
	return str(sum_, ":", p2);
}

fn dfs(x: i32, y: i32, g: &[str; :, :], char_: str)
{
	// This recursion was a nightmare

	if (any(g[x,y] == ["#", "~"])) return;

	let nx = i32(size(g,0));
	let ny = i32(size(g,1));
	if not in_bounds([0,0], [x,y], [nx,ny]) return;

	println("x, y = ", [x, y]);

	// Move down when possible
	let down = true;
	if y < ny-1
	{
		down = any(g[x, y+1] == [".", "|"]);
	}
	else
	{
		g[x, y] = MOVING;
		return;
	}

	if down
	{
		g[x, y] = char_;
		dfs(x, y+1, &g, char_);
		return;
	}
	// Otherwise, we can't go down

	g[x, y] = MOVING;

	//print_char_mat(&g);

	// Go left
	let xl = x - 1;
	while true
	{
		if (any(g[xl, y+1] == [".", "|"])) break;  // found an outlet below this level
		if (any(g[xl, y  ] == ["#", "~"])) break;  // blocked on this level
		g[xl, y] = MOVING;
		xl -= 1;
	}
	if (all(g[xl, y] != ["#", "~"]))
	{
		// Found an outlet.  Has it already been explored?
		if g[xl, y+1] != MOVING
		{
			g[xl, y] = MOVING;
			dfs(xl, y+1, &g, MOVING);
		}
	}

	// Go right.  A little WET compared to left case
	let xr = x + 1;
	while true
	{
		if (any(g[xr, y+1] == [".", "|"])) break;
		if (any(g[xr, y  ] == ["#", "~"])) break;
		g[xr, y] = MOVING;
		xr += 1;
	}
	if (all(g[xr, y] != ["#", "~"]))
	{
		if g[xr, y+1] != MOVING
		{
			g[xr, y] = MOVING;
			dfs(xr, y+1, &g, MOVING);
		}
	}

	if all(g[[xl,xr], y] == "#")
	{
		// Fill up this level because it's blocked on both sides
		g[xl+1: xr, y] = STANDING;

		// Backtrack to point above
		dfs(x, y-1, &g, MOVING);
	}
	return;
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2017/17");

	// Expect 36787:29662
	let p12 = part12();

	println("Ending AOC syntran main");
	println();
	return p12;
}

//==============================================================================

return main();

//==============================================================================

