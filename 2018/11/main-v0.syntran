
#include("../../utils.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1(): str
{
	let f = open(filename, "r");
	let serial = parse_i32(readln(f));
	close(f);

	println("serial = ", serial);

	let nx = 300;
	let ny = 300;
	let mat = [0; nx, ny];

	// Save "power levels" in mat
	for y in [1: ny + 1]
	for x in [1: nx + 1]
	{
		let rack = x + 10;
		let pow = rack * y;
		pow += serial;
		pow *= rack;

		//println("pow = ", pow);
		pow = (pow % 1000) / 100;  // get hundreds digit
		//println("pow = ", pow);
		//println();

		pow -= 5;

		mat[x-1, y-1] = pow;
	}

	// Kernel size
	let nxk = 3;
	let nyk = 3;

	// Convolute and sum kernel over grid.  Find location of max
	let max_sum = -2_000_000_000;
	let ixmax = -1;
	let iymax = -1;
	for y in [0: ny - nyk]
	for x in [0: nx - nxk]
	{
		let sum_ = sum(mat[x: x + nxk, y: y + nyk]);
		if sum_ > max_sum
		{
			max_sum = sum_;
			ixmax = x;
			iymax = y;
		}
	}
	let ans_ = str(ixmax+1, ",", iymax+1);

	println("part 1 = ", ans_);
	return str(ans_);
}

fn part2(): str
{
	let f = open(filename, "r");
	let serial = parse_i32(readln(f));
	close(f);

	println("serial = ", serial);

	let nx = 300;
	let ny = 300;
	let mat = [0; nx, ny];

	// Save "power levels" in mat
	for y in [1: ny + 1]
	for x in [1: nx + 1]
	{
		let rack = x + 10;
		let pow = rack * y;
		pow += serial;
		pow *= rack;

		//println("pow = ", pow);
		pow = (pow % 1000) / 100;  // get hundreds digit
		//println("pow = ", pow);
		//println();

		pow -= 5;

		mat[x-1, y-1] = pow;
	}

	let max_sum = -2_000_000_000;
	let ixmax = -1;
	let iymax = -1;
	let nkmax = -1;

	// Not sure how to optimize this.  I guess you could sum large kernels by
	// recursively breaking them down into smaller kernals and memoizing the
	// smaller sums
	//
	// Or don't even recurse.  Just use the sum from the last `nk` iteration at
	// the same upper-left location, then add the final row and col (and 1x1
	// diag)
	for nk in [1: nx]
	{
		println("nk = ", nk);

		// Kernel size
		let nxk = nk;
		let nyk = nk;

		// Convolute and sum kernel over grid.  Find location of max
		for y in [0: ny - nyk]
		for x in [0: nx - nxk]
		{
			let sum_ = sum(mat[x: x + nxk, y: y + nyk]);
			if sum_ > max_sum
			{
				max_sum = sum_;
				ixmax = x;
				iymax = y;
				nkmax = nk;
			}
		}
	}
	let ans_ = str(ixmax+1, ",", iymax+1, ",", nkmax);

	println("part 2 = ", ans_);
	return str(ans_);
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2017/11");

	let p1 = ""; let p2 = "";

	p1 = part1();
	p2 = part2();

	println("Ending AOC syntran main");
	println();
	return p1 + ":" + p2;
}

//==============================================================================

return main();

//==============================================================================

