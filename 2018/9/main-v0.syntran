
#include("../../utils.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
//ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1(): str
{
	let sum_ = 0'i64;

	let f = open(filename, "r");
	let str_ = readln(f);
	close(f);

	let nums = read_i32s(str_);
	println("nums = ", nums);

	let nplayers   = nums[0];
	let max_points = nums[1];

	nplayers = 9 ; max_points = 25 ;  // TODO

	// Circular double linked list `v` with indices of right/next/clockwise `ir`
	// and left/prev/ccw `il`
	let v  = [0; max_points + 1];
	let il = [0; max_points + 1];
	let ir = [0; max_points + 1];
	let iv = 0;  // current value index
	let n  = 1;  // number of values in list (start with just 0, next to itself)

	// Iterate over adding marbles `im`
	for im in [1: max_points + 1]
	{
		//println("marble = ", v[iv]);

		// Advance by 2 clockwise/right
		iv = ir[iv];
		iv = ir[iv];

		// Insert value `im` at the current position, shift the one to the right
		// further right

		v[im] = im;
		let l = iv;  //il[iv];
		let r = ir[iv];

		il[r] = im;
		ir[l] = im;
		//il[ir[iv]] = im;
		//ir[iv] = im;

		il[im] = l;
		ir[im] = r;

		// Print list for debugging
		let list_str = "";
		let vv = 0;
		for ii in [0: im + 1]
		{
			list_str += str(v[vv]) + " ";
			vv = ir[vv];
		}
		println("list_str = ", list_str);

	}

	println("part 1 = ", sum_);
	return str(sum_);
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2017/9");

	let p1 = ""; let p2 = "";

	p1 = part1();
	//p2 = part2();

	println("Ending AOC syntran main");
	println();
	return p1 + ":" + p2;
}

//==============================================================================

return main();

//==============================================================================

