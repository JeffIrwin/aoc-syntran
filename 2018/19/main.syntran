
#include("../../utils.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1_brute(): str
{
	let sum_ = 0'i64;

	let nlines = countln_(filename);
	let ninst = nlines - 1;

	let f = open(filename, "r");
	let str_ = readln(f);
	let iip = parse_i32(str_[3: len(str_)]);

	//println("iip = ", iip);

	let program = [""; ninst];
	for i in [0: ninst]
	{
		program[i] = readln(f);
	}
	close(f);
	//println("program = ", program);

	let nregs = 6;
	let regs = [0; nregs];
	while true
	{
		//println("str_ = ", str_);
		if (not in_bounds([0], [regs[iip]], [ninst])) break;

		let line = program[regs[iip]];
		let nums = read_i32s(line);

		let a = nums[0];
		let b = nums[1];
		let c = nums[2];

		let op = line[0: 4];

		//println("op, ip = ", op, " ", regs[iip]);
		//println("regs = ", regs);
		//println();

		if op == "addr"
			regs[c] = regs[a] + regs[b];
		else if op == "addi"
			regs[c] = regs[a] + b;
		else if op == "mulr"
			regs[c] = regs[a] * regs[b];
		else if op == "muli"
			regs[c] = regs[a] * b;
		else if op == "banr"
			regs[c] = regs[a] & regs[b];
		else if op == "bani"
			regs[c] = regs[a] & b;
		else if op == "borr"
			regs[c] = regs[a] | regs[b];
		else if op == "bori"
			regs[c] = regs[a] | b;
		else if op == "setr"
			regs[c] = regs[a];
		else if op == "seti"
			regs[c] = a;
		else if op == "gtir"
		{
			if (a > regs[b])  regs[c] = 1;
			else              regs[c] = 0;
		}
		else if op == "gtri"
		{
			if (regs[a] > b)  regs[c] = 1;
			else              regs[c] = 0;
		}
		else if op == "gtrr"
		{
			if (regs[a] > regs[b])  regs[c] = 1;
			else                    regs[c] = 0;
		}
		else if op == "eqir"
		{
			if (a == regs[b])  regs[c] = 1;
			else               regs[c] = 0;
		}
		else if op == "eqri"
		{
			if (regs[a] == b)  regs[c] = 1;
			else               regs[c] = 0;
		}
		else if op == "eqrr"
		{
			if (regs[a] == regs[b])  regs[c] = 1;
			else                     regs[c] = 0;
		}
		else
		{
			println("Error: bad op """, op, """");
			exit(-1);
		}
		regs[iip] += 1;
	}
	sum_ = regs[0];

	println("part 1 = ", sum_);
	return str(sum_);
}

fn part1(): str
{
	let sum_ = 0'i64;

	let nlines = countln_(filename);
	let ninst = nlines - 1;

	let f = open(filename, "r");
	let str_ = readln(f);
	let iip = parse_i32(str_[3: len(str_)]);

	//println("iip = ", iip);

	let program = [""; ninst];
	for i in [0: ninst]
	{
		program[i] = readln(f);
	}
	close(f);
	//println("program = ", program);

	let nregs = 6;
	let regs = [0; nregs];
	let k = 0;
	while true
	{
		//println("str_ = ", str_);
		if (not in_bounds([0], [regs[iip]], [ninst])) break;
		if (k > 1000) break;
		k += 1;

		let line = program[regs[iip]];
		let nums = read_i32s(line);

		let a = nums[0];
		let b = nums[1];
		let c = nums[2];

		let op = line[0: 4];

		//println("op, ip = ", op, " ", regs[iip]);
		//println("regs = ", regs);
		//println();

		if op == "addr"
			regs[c] = regs[a] + regs[b];
		else if op == "addi"
			regs[c] = regs[a] + b;
		else if op == "mulr"
			regs[c] = regs[a] * regs[b];
		else if op == "muli"
			regs[c] = regs[a] * b;
		else if op == "banr"
			regs[c] = regs[a] & regs[b];
		else if op == "bani"
			regs[c] = regs[a] & b;
		else if op == "borr"
			regs[c] = regs[a] | regs[b];
		else if op == "bori"
			regs[c] = regs[a] | b;
		else if op == "setr"
			regs[c] = regs[a];
		else if op == "seti"
			regs[c] = a;
		else if op == "gtir"
		{
			if (a > regs[b])  regs[c] = 1;
			else              regs[c] = 0;
		}
		else if op == "gtri"
		{
			if (regs[a] > b)  regs[c] = 1;
			else              regs[c] = 0;
		}
		else if op == "gtrr"
		{
			if (regs[a] > regs[b])  regs[c] = 1;
			else                    regs[c] = 0;
		}
		else if op == "eqir"
		{
			if (a == regs[b])  regs[c] = 1;
			else               regs[c] = 0;
		}
		else if op == "eqri"
		{
			if (regs[a] == b)  regs[c] = 1;
			else               regs[c] = 0;
		}
		else if op == "eqrr"
		{
			if (regs[a] == regs[b])  regs[c] = 1;
			else                     regs[c] = 0;
		}
		else
		{
			println("Error: bad op """, op, """");
			exit(-1);
		}
		regs[iip] += 1;
	}
	sum_ = sum_factors(regs[2]);

	println("part 1 = ", sum_);
	return str(sum_);
}

fn part2(): str
{
	let sum_ = 0'i64;

	let nlines = countln_(filename);
	let ninst = nlines - 1;

	let f = open(filename, "r");
	let str_ = readln(f);
	let iip = parse_i32(str_[3: len(str_)]);

	//println("iip = ", iip);

	let program = [""; ninst];
	for i in [0: ninst]
	{
		program[i] = readln(f);
	}
	close(f);
	//println("program = ", program);

	let nregs = 6;
	let regs = [0; nregs];
	regs[0] = 1;
	let k = 0;
	while true
	{
		//println("str_ = ", str_);
		if (not in_bounds([0], [regs[iip]], [ninst])) break;
		if (k > 1000) break;  // trust me bro

		let line = program[regs[iip]];
		let nums = read_i32s(line);

		let a = nums[0];
		let b = nums[1];
		let c = nums[2];

		let op = line[0: 4];

		//println("op, ip, k = ", op, " ", regs[iip], " ", k);
		//println("regs = ", regs);
		//println();

		if op == "addr"
			regs[c] = regs[a] + regs[b];
		else if op == "addi"
			regs[c] = regs[a] + b;
		else if op == "mulr"
			regs[c] = regs[a] * regs[b];
		else if op == "muli"
			regs[c] = regs[a] * b;
		else if op == "banr"
			regs[c] = regs[a] & regs[b];
		else if op == "bani"
			regs[c] = regs[a] & b;
		else if op == "borr"
			regs[c] = regs[a] | regs[b];
		else if op == "bori"
			regs[c] = regs[a] | b;
		else if op == "setr"
			regs[c] = regs[a];
		else if op == "seti"
			regs[c] = a;
		else if op == "gtir"
		{
			if (a > regs[b])  regs[c] = 1;
			else              regs[c] = 0;
		}
		else if op == "gtri"
		{
			if (regs[a] > b)  regs[c] = 1;
			else              regs[c] = 0;
		}
		else if op == "gtrr"
		{
			if (regs[a] > regs[b])  regs[c] = 1;
			else                    regs[c] = 0;
		}
		else if op == "eqir"
		{
			if (a == regs[b])  regs[c] = 1;
			else               regs[c] = 0;
		}
		else if op == "eqri"
		{
			if (regs[a] == b)  regs[c] = 1;
			else               regs[c] = 0;
		}
		else if op == "eqrr"
		{
			if (regs[a] == regs[b])  regs[c] = 1;
			else                     regs[c] = 0;
		}
		else
		{
			println("Error: bad op """, op, """");
			exit(-1);
		}
		regs[iip] += 1;
		k += 1;
	}

	// Yeah, I had no idea on this one.  Cheat reference:
	//
	//     https://www.reddit.com/r/adventofcode/comments/a7j9zc/comment/ec3id1r/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
	//
	// I did part 1 the brute force way and it took nearly an hour.  That's not
	// feasible for part 2

	//sum_ = regs[0];
	sum_ = sum_factors(regs[2]);

	println("part 2 = ", sum_);
	return str(sum_);
}

fn sum_factors(a: i32): i32
{
	let sum_ = 0;
	for i in [1: a+1]
		if a % i == 0
			sum_ += i;
	return sum_;
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2018/19");

	let p1 = ""; let p2 = "";

	// Expect 1806:18741072
	p1 = part1();
	p2 = part2();

	println("Ending AOC syntran main");
	println();
	return p1 + ":" + p2;
}

//==============================================================================

return main();

//==============================================================================

