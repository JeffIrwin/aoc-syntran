
#include("../../utils.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1(): str
{
	let vmat = read_i32_mat(filename);
	let v = vmat[:, 0];
	//println("v = ", v);

	let i = 0;  // index of node being walked
	let sum_ = 0;
	walk_nodes_1(&v, &i, &sum_);

	println("part 1 = ", sum_);
	return str(sum_);
}

fn walk_nodes_1(v: &[i32; :], i: &i32, sum_: &i32)
{
	// i'm glad i had the foresight to name this `*_1`
	let nchild = v[i];
	let nmeta  = v[i+1];
	i += 2;

	for ic in [0: nchild]
	{
		walk_nodes_1(&v, &i, &sum_);
	}
	for im in [0: nmeta]
	{
		sum_ += v[i];
		i += 1;
	}
	return;
}

fn part2(): str
{
	// You probably don't need i64 for part two but I thought I had overflow
	// before I remembered to do the bounds-checking of child indices
	let vmat = i64(read_i32_mat(filename));
	let v = vmat[:, 0];
	//println("v = ", v);

	let i = 0'i64;
	let sum_ = walk_nodes_2(&v, &i);

	println("part 2 = ", sum_);
	return str(sum_);
}

fn walk_nodes_2(v: &[i64; :], i: &i64): i64
{
	let nchild = v[i];
	let nmeta  = v[i+1];
	i += 2;

	let vals = [0'i64; nchild];  // values of child nodes
	let val  =  0'i64;           // return value for this node
	for ic in [0: nchild]
	{
		vals[ic] = walk_nodes_2(&v, &i);
	}
	for im in [0: nmeta]
	{
		//sum_ += v[i];
		if (nchild == 0)
			val += v[i];
		else
		{
			let ic = v[i] - 1;  // 1-based indices for vals of children
			if ic >= 0 and ic < nchild
				val += vals[ic];
		}
		i += 1;
	}
	return val;
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2017/8");

	let p1 = ""; let p2 = "";

	// Expect 37262:20839
	p1 = part1();
	p2 = part2();

	println("Ending AOC syntran main");
	println();
	return p1 + ":" + p2;
}

//==============================================================================

return main();

//==============================================================================

