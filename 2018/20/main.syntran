
#include("../../utils.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

// Opposite directions are 2 apart
let NDIRS = 4;
let DIRS =
[
	 1,  0,  // east
	 0, -1,  // north
	-1,  0,  // west
	 0,  1   // south
	;
	2, NDIRS
];
let DIRS_STR = "ENWS";

fn part12(): str
{
	let sum_ = 0'i64;

	let f = open(filename, "r");
	let regex = readln(f);
	close(f);

	//println("regex = ", regex);

	let HCAP = 100;
	//HCAP = 2;

	let CAP = 2 * HCAP;

	// map[x,y,d] is true iff the door leading out of position [x,y] in direction
	// d (as encoded by DIRS) is open
	let map = [false; CAP, CAP, NDIRS];

	// Start in the center of the grid and hope you don't overflow
	let x = HCAP;
	let y = HCAP;

	// Stack and pointer for regex branching
	let SCAP = 1024;
	let s = [-1; 2, SCAP];
	let sp = 0;

	// Parse the regex and build the `map`
	for i in [0: len(regex)]
	{
		let rc = regex[i];
		let d = scan(DIRS_STR, rc);

		if rc == "^"
		{
			// Do nothing.  Start of line
		}
		else if rc == "$"
		{
			// Do nothing.  End of line
		}
		else if rc == "("
		{
			// Push the current position to the stack
			s[:,sp] = [x, y];
			sp += 1;
			if sp >= SCAP
			{
				println("Error:  stack overflow!");
				exit(-4);
			}
		}
		else if rc == "|"
		{
			// Peek position without removing from stack
			//
			// Note that a pattern like [A-Z])[A-Z] never occurs.  Right paren
			// only occurs either in `|)` or `)|`
			let xy = s[:, sp-1];
			x = xy[0];  y = xy[1];
		}
		else if rc == ")"
		{
			// Pop
			sp -= 1;
			let xy = s[:,sp];
			x = xy[0];  y = xy[1];
		}
		else if d >= 0
		{
			let x0 = x;
			let y0 = y;

			x += DIRS[0,d];
			y += DIRS[1,d];

			if not in_bounds([0,0], [x,y], [CAP,CAP])
			{
				println("Error: grid overflow!");
				exit(-2);
			}
			map[x0, y0, d] = true;
			map[x , y , (d+2) % NDIRS] = true;  // going opposite dir.  ordering of dirs matters here
		}
		else
		{
			println("Error: bad regex char '", rc, "'");
			exit(-1);
		}
	}
	//println("map = ", map);

	// Do a BFS from start point to calculate min distance to each point
	x = HCAP;
	y = HCAP;

	let dists = [-1; CAP, CAP];
	dists[x,y] = 0;

	// Very small footprint circular queue!  I didn't know you could just mod on
	// queues until I watched a Nic Barker video.  Probably this one:
	//
	//     https://www.youtube.com/watch?v=KwBuV7YZido
	//
	// With a straight queue, I had to go up to QCAP ~= 16_000 to not overflow.
	// There is no ambiguity.  Before popping, qs==qe means that the queue is
	// empty.  After pushing, qs==qe means overflow
	let QCAP = 32;
	let q = [-1; 2, QCAP];
	let qs = 0;  let qe = 0;

	// Push
	q[:, qe] = [x, y];  qe += 1;

	//while qs < qe
	while qs != qe
	{
		// Pop
		let u = q[:, qs];  qs = (qs+1) % QCAP;

		for d in [0: NDIRS]
		{
			if (not map[u[0], u[1], d]) continue;
			let v = u + DIRS[:,d];
			if (dists[v[0], v[1]] >= 0) continue;
			dists[v[0], v[1]] = dists[u[0], u[1]] + 1;
			q[:, qe] = v;  qe = (qe+1) % QCAP;
			if qe == qs
			{
				println("Error:  queue overflow!");
				exit(-3);
			}
		}
	}
	//println("dists = ", dists);

	sum_ = maxval(dists);
	let p2 = count(dists >= 1000);

	println("part 1 = ", sum_);
	println("part 2 = ", p2);
	return str(sum_, ":", p2);
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2018/20");

	// Expect 4406:8468
	let p12 = part12();

	println("Ending AOC syntran main");
	println();
	return p12;
}

//==============================================================================

return main();

//==============================================================================

