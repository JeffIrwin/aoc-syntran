
#include("../../utils.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
//ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

// Directions are in reverse reading order to break ties without further logic
let NDIRS = 4;
let DIRS =
[
	 1,  0,  // east
	 0, -1,  // north
	-1,  0,  // west
	 0,  1   // south
	;
	2, NDIRS
];
let DIRS_STR = "ENWS";

fn part1(): str
{
	let sum_ = 0'i64;

	let f = open(filename, "r");
	let regex = readln(f);
	close(f);

	println("regex = ", regex);

	let HCAP = 128;
	HCAP = 2;

	let CAP = 2 * HCAP;

	// map[x,y,d] is true if the door leading out of position [x,y] in direction
	// d (as encoded by DIRS) is open
	let map = [false; CAP, CAP, NDIRS];

	// Start in the center of the grid and hope you don't overflow
	let x = HCAP;
	let y = HCAP;

	for i in [0: len(regex)]
	{
		let rc = regex[i];
		let d = scan(DIRS_STR, rc);

		if rc == "^"
		{
			// Do nothing.  Start of line
		}
		else if rc == "$"
		{
			// Do nothing.  End of line
		}
		else if d >= 0
		{
			let x0 = x;
			let y0 = y;

			x += DIRS[0,d];
			y += DIRS[1,d];

			if not in_bounds([0,0], [x,y], [CAP,CAP])
			{
				println("Error: overflow/underflow!");
				exit(-2);
			}
			map[x0, y0, d] = true;
			map[x , y , (d+2) % NDIRS] = true;  // going opposite dir.  ordering of dirs matters here
		}
		else
		{
			println("Error: bad regex char '", rc, "'");
			exit(-1);
		}
	}
	println("map = ", map);

	// Do a BFS from start point to calculate min distance to each point
	x = HCAP;
	y = HCAP;

	let dists = [-1; CAP, CAP];
	dists[x,y] = 0;

	let QCAP = 1024;
	let q = [-1; 2, QCAP];
	let qs = 0;  let qe = 0;

	// Push
	q[:, qe] = [x, y];  qe += 1;

	while qs < qe
	{
		// Pop
		let u = q[:, qs];  qs += 1;

		for d in [0: NDIRS]
		{
			if (not map[u[0], u[1], d]) continue;
			let v = u + DIRS[:,d];
			if (dists[v[0], v[1]] >= 0) continue;
			dists[v[0], v[1]] = dists[u[0], u[1]] + 1;
			q[:, qe] = v;  qe += 1;
			if qe >= QCAP
			{
				println("Error:  queue overflow!");
				exit(-3);
			}
		}
	}
	println("dists = ", dists);

	sum_ = maxval(dists);

	println("part 1 = ", sum_);
	return str(sum_);
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2018/20");

	let p1 = ""; let p2 = "";

	p1 = part1();
	//p2 = part2();

	println("Ending AOC syntran main");
	println();
	return p1 + ":" + p2;
}

//==============================================================================

return main();

//==============================================================================

