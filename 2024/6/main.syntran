
#include("../../utils-2024.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

let NDIRS = 4;
let DIRS =
[
	 0, -1,
	 1,  0,
	 0,  1,
	-1,  0
	;
	2, NDIRS
];

//==============================================================================

fn get_visited(g: &[str; :,:], xin: i32, yin: i32): [bool; :,:]
{
	let x = xin;
	let y = yin;

	let nx = size(g, 0);
	let ny = size(g, 1);

	let visited = [false; nx, ny];
	let inside = true;
	let id = 0;
	while true
	{
		visited[x, y] = true;
		let x0 = x;
		let y0 = y;

		x += DIRS[0, id];
		y += DIRS[1, id];

		inside = (x >= 0 and x < nx and y >= 0 and y < ny);
		if (not inside) break;
		if g[x, y] == "#"
		{
			x = x0;
			y = y0;
			id = (id + 1) % 4;
		}
	}
	return visited;
}

fn part1(): i64
{
	let sum_ = 0'i64;

	let ny = countln_(filename);

	let f = open(filename);
	let str_ = readln(f);
	let nx = i32(len(str_));
	//println("nx, ny = ", [nx, ny]);

	let g = [" "; nx, ny];

	let guardx = -1;
	let guardy = -1;

	let y = 0;
	while not eof(f)
	{
		//println("str_ = ", str_);

		for x in [0: nx]
		{
			g[x, y] = str_[x];
			if g[x, y] == "^"
			{
				guardx = x;
				guardy = y;
			}
		}
		y += 1;
		str_ = readln(f);
	}
	close(f);
	//println("g = ", g);
	//println("guard = ", [guardx, guardy]);

	let visited = get_visited(&g, guardx, guardy);
	sum_ = count(visited);

	println("part 1 = ", sum_);
	return sum_;
}

fn part2(): i64
{
	let sum_ = 0'i64;

	let ny = countln_(filename);

	let f = open(filename);
	let str_ = readln(f);
	let nx = i32(len(str_));
	//println("nx, ny = ", [nx, ny]);

	let g = [" "; nx, ny];

	let guardx = -1;
	let guardy = -1;

	let y = 0;
	while not eof(f)
	{
		//println("str_ = ", str_);

		for x in [0: nx]
		{
			g[x, y] = str_[x];
			if g[x, y] == "^"
			{
				guardx = x;
				guardy = y;
			}
		}
		y += 1;
		str_ = readln(f);
	}
	close(f);
	//println("g = ", g);
	//println("guard = ", [guardx, guardy]);

	// Get visited locations without any extra obstructions first.  These are
	// the only locations where placing an extra obstruction will make a
	// difference
	let v0 = get_visited(&g, guardx, guardy);
	//let nv0 = count(v0);
	//let obs = [-1; 2, nv0];

	// Iterate over all possible obstruction locations
	//
	// From part 1, i know that only about 1/3 of all locations are visited in
	// the original path.  We could optimize 3x faster by not placing
	// obstructions off the og path, because they will never be hit!  You could
	// also place obstructions on the path in order, and then remember the state
	// just before hitting it to save some work
	//
	for ox in [0: nx] {
	//println("ox = ", ox);
	for oy in [0: ny]
	{
		if (not v0[ox, oy]) continue;

		//println("oy = ", oy);

		let x = guardx;
		y = guardy;

		//let visited = [-1; nx, ny];
		let visited = [false; nx, ny, NDIRS];

		let inside = true;
		let looping = false;
		let id = 0;
		while inside and not looping
		{
			looping = visited[x, y, id];
			visited[x, y, id] = true;
			//println("x, y, id = ", [x, y, id]);

			let x0 = x;
			let y0 = y;

			x += DIRS[0, id];
			y += DIRS[1, id];
			inside = (x >= 0 and x < nx and y >= 0 and y < ny);
			if (not inside) break;
			if g[x, y] == "#" or (x == ox and y == oy)
			{
				x = x0;
				y = y0;
				id = (id + 1) % 4;
			}
		}
		if (looping) sum_ += 1;
	}}

	println("part 2 = ", sum_);
	return sum_;
}

//==============================================================================

fn main(): i64
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2024/6");

	let sum_ = 0'i64;

	// Expect 5208 + 1972
	sum_ += part1();
	sum_ += part2();

	println("Ending AOC syntran main");
	println();
	return sum_;
}

//==============================================================================

return main();

//==============================================================================

