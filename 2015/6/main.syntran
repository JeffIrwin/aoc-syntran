
#include("../../utils-2024.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1(): i64
{
	let lights = [false; 1000, 1000];

	let f = open(filename, "r");
	let str_ = readln(f);
	while not eof(f)
	{
		//println("str_ = ", str_);

		let turn_on  = starts_with_(str_, "turn on");
		let turn_off = starts_with_(str_, "turn off");
		let toggle   = starts_with_(str_, "toggle");

		let nums = read_i32s(str_);
		//println("nums = ", nums);

		let lo = nums[0: 2];
		let hi = nums[2: 4] + 1;

		if turn_on
			lights[lo[0]: hi[0], lo[1]: hi[1]] = true;
		else if turn_off
			lights[lo[0]: hi[0], lo[1]: hi[1]] = false;
		else if toggle
			lights[lo[0]: hi[0], lo[1]: hi[1]] = not lights[lo[0]: hi[0], lo[1]: hi[1]];

		str_ = readln(f);
	}
	close(f);
	let sum_ = count(lights);

	println("part 1 = ", sum_);
	return sum_;
}

fn part2(): i64
{
	let lights = [0; 1000, 1000];

	let f = open(filename, "r");
	let str_ = readln(f);
	while not eof(f)
	{
		//println("str_ = ", str_);

		let turn_on  = starts_with_(str_, "turn on");
		let turn_off = starts_with_(str_, "turn off");
		let toggle   = starts_with_(str_, "toggle");

		let nums = read_i32s(str_);
		//println("nums = ", nums);

		let lo = nums[0: 2];
		let hi = nums[2: 4] + 1;

		if turn_on
			lights[lo[0]: hi[0], lo[1]: hi[1]] += 1;
		else if turn_off
		{
			lights[lo[0]: hi[0], lo[1]: hi[1]] -= 1;
			//lights[lo[0]: hi[0], lo[1]: hi[1]] = max(lights[lo[0]: hi[0], lo[1]: hi[1]], 0);

			// There's probably already a clever way to do this without loops in
			// syntran.  TODO: make min/max elemental in syntran
			for x in [lo[0]: hi[0]]
			for y in [lo[1]: hi[1]]
				lights[x, y] = max(lights[x, y], 0);
		}
		else if toggle
			lights[lo[0]: hi[0], lo[1]: hi[1]] += 2;

		str_ = readln(f);
	}
	close(f);
	let sum_ = i64(sum(lights));

	println("part 1 = ", sum_);
	return sum_;
}

//==============================================================================

fn main(): i64
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2015/6");

	let sum_ = 0'i64;

	sum_ += part1();
	sum_ += part2();

	println("Ending AOC syntran main");
	println();
	return sum_;
}

//==============================================================================

return main();

//==============================================================================

