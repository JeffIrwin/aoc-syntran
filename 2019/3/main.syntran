
#include("../../utils.syntran");
//#include("../../dict_i64.syntran");

//==============================================================================

let ifile = 0;
ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1_old(): str
{
	let sum_ = 2_000_000_000;

	let f = open(filename, "r");
	let str0 = readln(f);
	let str1 = readln(f);
	close(f);
	//println("str0 = ", str0);
	//println("str1 = ", str1);

	let HCAP = 12;
	HCAP = 256;
	//HCAP = 1024 * 4;

	let CAP = HCAP * 2;
	let g = [0; CAP, CAP];

	{
		// Mark the first wire's path
		let insts = split_(str0, ",");
		let x = HCAP;
		let y = HCAP;
		for inst in insts
		{
			let x0 = x;
			let y0 = y;
			if inst[0] == "R"
			{
				x += parse_i32(inst[1: len(inst)]);
				g[x0+1:x+1, y0] += 1;
			}
			else if inst[0] == "L"
			{
				x -= parse_i32(inst[1: len(inst)]);
				g[x:x0, y0] += 1;
			}
			else if inst[0] == "D"
			{
				y += parse_i32(inst[1: len(inst)]);
				g[x0, y0+1:y+1] += 1;
			}
			else if inst[0] == "U"
			{
				y -= parse_i32(inst[1: len(inst)]);
				g[x0, y:y0] += 1;
			}
			//println("x0, x = ", [x0, x]);
			//println("y0, y = ", [y0, y]);
			//println();
		}
	}

	{
		// Mark the second wire's path
		let insts = split_(str1, ",");
		let x = HCAP;
		let y = HCAP;
		for inst in insts
		{
			let x0 = x;
			let y0 = y;
			if inst[0] == "R"
			{
				x += parse_i32(inst[1: len(inst)]);
				g[x0+1:x+1, y0] += 2;
			}
			else if inst[0] == "L"
			{
				x -= parse_i32(inst[1: len(inst)]);
				g[x:x0, y0] += 2;
			}
			else if inst[0] == "D"
			{
				y += parse_i32(inst[1: len(inst)]);
				g[x0, y0+1:y+1] += 2;
			}
			else if inst[0] == "U"
			{
				y -= parse_i32(inst[1: len(inst)]);
				g[x0, y:y0] += 2;
			}
		}
	}
	//println("g = ", g);

	for y in [0: CAP]
	for x in [0: CAP]
	{
		if g[x,y] == 3
		{
			let d = abs(x-HCAP) + abs(y-HCAP);
			//println("d = ", d);
			if d > 0
				sum_ = min(sum_, d);
		}
	}

	println("part 1 = ", sum_);
	return str(sum_);
}

fn part1(): str
{
	let sum_ = 2_000_000_000;

	let f = open(filename, "r");
	let str0 = readln(f);
	let str1 = readln(f);
	close(f);
	//println("str0 = ", str0);
	//println("str1 = ", str1);

	// Mark the first wire's path as a polyline `p0`
	let insts = split_(str0, ",");
	let np0 = size(insts, 0) + 1;
	let p0 = [0; 2, np0];
	let x = 0;
	let y = 0;
	let i = 0;
	p0[:, i] = [x, y];
	for inst in insts
	{
		i += 1;
		let x0 = x;
		let y0 = y;
		if inst[0] == "R"
			x += parse_i32(inst[1: len(inst)]);
		else if inst[0] == "L"
			x -= parse_i32(inst[1: len(inst)]);
		else if inst[0] == "D"
			y += parse_i32(inst[1: len(inst)]);
		else if inst[0] == "U"
			y -= parse_i32(inst[1: len(inst)]);
		p0[:, i] = [x, y];
		//println("x0, x = ", [x0, x]);
		//println("y0, y = ", [y0, y]);
		//println();
	}
	//println("p0 = ", p0);

	// Iterate over the second wire's path
	insts = split_(str1, ",");
	x = 0;
	y = 0;
	for inst in insts
	{
		let x0 = x;
		let y0 = y;
		if inst[0] == "R"
			x += parse_i32(inst[1: len(inst)]);
		else if inst[0] == "L"
			x -= parse_i32(inst[1: len(inst)]);
		else if inst[0] == "D"
			y += parse_i32(inst[1: len(inst)]);
		else if inst[0] == "U"
			y -= parse_i32(inst[1: len(inst)]);
		//println("x0, x = ", [x0, x]);
		//println("y0, y = ", [y0, y]);
		//println();

		let x1l = min(x0, x);
		let x1h = max(x0, x);
		let y1l = min(y0, y);
		let y1h = max(y0, y);

		// Iterate over every line of the first wire and check for intersections
		for i0 in [1: np0]
		{
			let x0l = min(p0[0, i0-1], p0[0, i0]);
			let x0h = max(p0[0, i0-1], p0[0, i0]);
			let y0l = min(p0[1, i0-1], p0[1, i0]);
			let y0h = max(p0[1, i0-1], p0[1, i0]);

			if x0l == x0h and y1l == y1h
			{
				if x1l <= x0l and x0l <= x1h and
				   y0l <= y1l and y1l <= y0h
				{
					let d = abs(x0l) + abs(y1l);
					if (d > 0) sum_ = min(sum_, d);
					//println("d = ", d);
				}
			}

			if y0l == y0h and x1l == x1h
			{
				if y1l <= y0l and y0l <= y1h and
				   x0l <= x1l and x1l <= x0h
				{
					let d = abs(y0l) + abs(x1l);
					if (d > 0) sum_ = min(sum_, d);
					//println("d = ", d);
				}
			}
		}
	}

	println("part 1 = ", sum_);
	return str(sum_);
}

fn part2(): str
{
	let sum_ = 2_000_000_000;

	let f = open(filename, "r");
	let str0 = readln(f);
	let str1 = readln(f);
	close(f);
	//println("str0 = ", str0);
	//println("str1 = ", str1);

	// Mark the first wire's path as a polyline `p0`, now with time for part 2
	let insts = split_(str0, ",");
	let np0 = size(insts, 0) + 1;
	let p0 = [0; 3, np0];
	let x = 0;
	let y = 0;
	let t = 0;
	let i = 0;
	p0[:, i] = [x, y, t];
	for inst in insts
	{
		i += 1;
		let x0 = x;
		let y0 = y;
		if inst[0] == "R"
			x += parse_i32(inst[1: len(inst)]);
		else if inst[0] == "L"
			x -= parse_i32(inst[1: len(inst)]);
		else if inst[0] == "D"
			y += parse_i32(inst[1: len(inst)]);
		else if inst[0] == "U"
			y -= parse_i32(inst[1: len(inst)]);
		t += abs(x - x0) + abs(y - y0);
		p0[:, i] = [x, y, t];
		//println("x0, x = ", [x0, x]);
		//println("y0, y = ", [y0, y]);
		//println();
	}
	//println("p0 = ", p0);

	// Iterate over the second wire's path
	insts = split_(str1, ",");
	x = 0;
	y = 0;
	t = 0;
	for inst in insts
	{
		let x0 = x;
		let y0 = y;
		let t0 = t;
		if inst[0] == "R"
			x += parse_i32(inst[1: len(inst)]);
		else if inst[0] == "L"
			x -= parse_i32(inst[1: len(inst)]);
		else if inst[0] == "D"
			y += parse_i32(inst[1: len(inst)]);
		else if inst[0] == "U"
			y -= parse_i32(inst[1: len(inst)]);
		t += abs(x - x0) + abs(y - y0);
		//println("x0, x = ", [x0, x]);
		//println("y0, y = ", [y0, y]);
		//println();

		let x1l = min(x0, x);
		let x1h = max(x0, x);
		let y1l = min(y0, y);
		let y1h = max(y0, y);

		// Iterate over every line of the first wire and check for intersections
		for i0 in [1: np0]
		{
			let x0l = min(p0[0, i0-1], p0[0, i0]);
			let x0h = max(p0[0, i0-1], p0[0, i0]);
			let y0l = min(p0[1, i0-1], p0[1, i0]);
			let y0h = max(p0[1, i0-1], p0[1, i0]);
			let t0l = min(p0[2, i0-1], p0[2, i0]);

			if x0l == x0h and y1l == y1h
			{
				if x1l <= x0l and x0l <= x1h and
				   y0l <= y1l and y1l <= y0h
				{
					let d = abs(x0l) + abs(y1l);
					if (d > 0)
					{
						//let ta = t0l + abs(y1l - y0l);
						//let tb = t0  + abs(x0l - x1l);
						let ta = t0l + abs(y1l - p0[1, i0-1]);
						let tb = t0  + abs(x0l - x0);
						sum_ = min(sum_, ta + tb);
						//println("hori 0");
						//println("ta, tb = ", [ta, tb]);
					}
					//println("d = ", d);
				}
			}

			if y0l == y0h and x1l == x1h
			{
				if y1l <= y0l and y0l <= y1h and
				   x0l <= x1l and x1l <= x0h
				{
					let d = abs(y0l) + abs(x1l);
					if (d > 0)
					{
						//let ta = t0l + abs(x1l - x0l);
						//let tb = t0  + abs(y0l - y1l);
						let ta = t0l + abs(x1l - p0[0, i0-1]);
						let tb = t0  + abs(y0l - y0);
						sum_ = min(sum_, ta + tb);
						//println("vert 0");
						//println("x, y = ", [x1l, y0l]);
						//println("t0l = ", t0l);
						//println("ta, tb = ", [ta, tb]);
					}
					//println("d = ", d);
				}
			}

			// TODO: parallel overlap?  Doesn't matter apparently

			//println();
		}
	}

	println("part 2 = ", sum_);
	return str(sum_);
}

//==============================================================================

fn main(): str
{
	// For unit-testing (within the syntran repo), this main fn returns a value
	// to be compared with expected results
	println();
	println("Starting AOC syntran main 2019/2");

	let p1 = ""; let p2 = "";

	// Expect 1519:14358
	p1 = part1();
	p2 = part2();

	println("Ending AOC syntran main");
	println();
	return p1 + ":" + p2;
}

//==============================================================================

return main();

//==============================================================================

