
#include("../../utils.syntran");

//==============================================================================

let ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt",
	"test-input2.txt",
	"test-input3.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1(): i32
{
	let sum_ = 0;

	let n = countln_(filename) - 2;
	println("n = ", n);

	let f = open(filename, "r");
	let instr = readln(f);

	let str_ = readln(f);  // blank line

	let nodes  = [""; n];
	let lefts  = [""; n];
	let rights = [""; n];

	for i in [0: n]
	{
		str_ = readln(f);
		println("str_ = ", str_);

		let strs = split_(str_, "= (),");

		nodes [i] = strs[0];
		lefts [i] = strs[1];
		rights[i] = strs[2];

	}
	close(f);

	println("instr = ", instr);

	let ninstr = len(instr);
	println("ninstr = ", ninstr);

	//println("nodes = ", nodes);
	//println("lefts = ", lefts);
	//println("rights = ", rights);
	
	// Translate node identifiers to integer indices

	//let nodes_idx = [0: n];
	//println("nodes_idx = ", nodes_idx);

	let lefts_idx = [-1; n];
	let rights_idx = [-1; n];
	//println("lefts_idx = ", lefts_idx);

	for i in [0: n]
	{
		let j = 0;
		let found = false;
		while j < n and not found
		{
			found = nodes[j] == lefts[i];
			j += 1;
		}
		lefts_idx[i] = j-1;

		j = 0;
		found = false;
		while j < n and not found
		{
			found = nodes[j] == rights[i];
			j += 1;
		}
		rights_idx[i] = j-1;

	}

	println("lefts_idx = ", lefts_idx);
	println("rights_idx = ", rights_idx);

	for i in [0: n]
	{
		//println("left, left = ", lefts[i], ", ", nodes[lefts_idx[i]]);
		//println("right, right = ", right[i], ", ", nodes[rights_idx[i]]);

		if (not (lefts[i] == nodes[lefts_idx[i]]))
			println("left mismatch");

		if (not (rights[i] == nodes[rights_idx[i]]))
			println("left mismatch");
	}

	// Traverse the graph of nodes according to the instructions
	let i = 0;

	// Lookup location of "AAA"
	let j = 0;
	while not (nodes[j] == "AAA")
	{
		j += 1;
	}

	while not (nodes[j] == "ZZZ")
	{
		let ins = instr[i % ninstr];
		//println("ins = ", ins);
		//println("node = ", nodes[j]);

		if i % 100000 == 0
		{
			println("i = ", i);
			println("ins = ", ins);
			println("node = ", nodes[j]);
		}

		if (ins == "L")
			j =  lefts_idx[j];
		else if (ins == "R")
			j = rights_idx[j];
		else
			println("Error: bad instr");

		i += 1;
	}
	sum_ = i;

	println("part 1 = ", sum_);
	sum_;
}

//==============================================================================

fn part2(): i32
{
	println("starting part2()");
	let sum_ = 0;

	let n = countln_(filename) - 2;
	println("n = ", n);

	let f = open(filename, "r");
	let instr = readln(f);

	let str_ = readln(f);  // blank line

	let nodes  = [""; n];
	let lefts  = [""; n];
	let rights = [""; n];

	for i in [0: n]
	{
		str_ = readln(f);
		println("str_ = ", str_);

		let strs = split_(str_, "= (),");

		nodes [i] = strs[0];
		lefts [i] = strs[1];
		rights[i] = strs[2];
	}
	close(f);

	println("instr = ", instr);

	let ninstr = len(instr);
	println("ninstr = ", ninstr);

	//println("nodes = ", nodes);
	//println("lefts = ", lefts);
	//println("rights = ", rights);
	
	// Translate node identifiers to integer indices

	//let nodes_idx = [0: n];
	//println("nodes_idx = ", nodes_idx);

	let lefts_idx = [-1; n];
	let rights_idx = [-1; n];
	//println("lefts_idx = ", lefts_idx);

	for i in [0: n]
	{
		let j = 0;
		let found = false;
		while j < n and not found
		{
			found = nodes[j] == lefts[i];
			j += 1;
		}
		lefts_idx[i] = j-1;

		j = 0;
		found = false;
		while j < n and not found
		{
			found = nodes[j] == rights[i];
			j += 1;
		}
		rights_idx[i] = j-1;
	}

	println("lefts_idx = ", lefts_idx);
	println("rights_idx = ", rights_idx);

	//for i in [0: n]
	//{
	//	//println("left, left = ", lefts[i], ", ", nodes[lefts_idx[i]]);
	//	//println("right, right = ", right[i], ", ", nodes[rights_idx[i]]);

	//	if (not (lefts[i] == nodes[lefts_idx[i]]))
	//		println("left mismatch");

	//	if (not (rights[i] == nodes[rights_idx[i]]))
	//		println("left mismatch");
	//}

	// Traverse the graph of nodes according to the instructions

	// Number of nodes that end with "A"
	let na = 0;
	for i in [0: n]
		if (ends_with_(nodes[i], "A")) na += 1;
	println("na = ", na);

	// Lookup location of "..A"

	//let j = 0;
	let j = [0; na];

	let k = 0;
	for i in [0: n]
		if (ends_with_(nodes[i], "A"))
		{
			j[k] = i;
			k += 1;
		}

	println("j = ", j);

	// This version uses fns but suffers from debilitating memory leaks
	let i = 0;
	while not (all_ends_with_(nodes, j, "Z"))
	{
		let ins = instr[i % ninstr];
		//println("ins = ", ins);
		//println("node = ", nodes[j]);

		if i % 100000 == 0
		{
			println("i = ", i);
			println("ins = ", ins);
			//println("node = ", nodes[j]);
		}

		for k in [0: na]
			if (ins == "L")
				j[k] =  lefts_idx[j[k]];
			else if (ins == "R")
				j[k] = rights_idx[j[k]];
			else
				println("Error: bad instr");

		i += 1;
	}
	sum_ = i;

	println("part 2 = ", sum_);
	sum_;
}

//==============================================================================

fn main()
{
	println();
	println("Starting AOC syntran main");

	//part1();
	part2();

	println("Ending AOC syntran main");
	println();
}

//==============================================================================

main();

//==============================================================================

