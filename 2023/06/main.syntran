
#include("../../utils.syntran");

//==============================================================================

let ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//==============================================================================

fn part1(): i32
{
	let prod_ = 1;

	let f = open(filename);

	let str_ = readln(f);
	println("str_ = ", str_);

	let strs  = split_(str_, ":");
	let times = parse_i32_delim(strs[1], " ");
	println("times = ", times);

	str_ = readln(f);
	strs  = split_(str_, ":");
	let rec_dists = parse_i32_delim(strs[1], " ");
	println("rec_dists = ", rec_dists);

	for i in [0: size(times, 0)]
	{
		let race_time = times[i];
		let rec_dist = rec_dists[i];

		println("race_time, rec_dist = ", race_time, ", ", rec_dist);

		let nwin = 0;
		for j in [1: race_time]
		{
			// Acceleration is 1 mm/ms/ms
			let speed = j * 1;

			let duration = race_time - j;
			let dist = speed * duration;
			println("dist = ", dist);

			if (dist > rec_dist) nwin += 1;
		}
		println();

		prod_ *= nwin;

	}

	close(f);

	println("part 1 = ", prod_);
	prod_;
}

//==============================================================================

fn part2(): i32
{
	let prod_ = i64(1);

	let f = open(filename);

	let str_ = readln(f);
	println("str_ = ", str_);

	let strs  = split_(str_, ":");

	// There's only one "time" now but YOLO
	let times = parse_i32(rm_char(strs[1], " "));
	//let times = parse_i32_delim(strs[1], " ");

	println("times = ", times);

	str_ = readln(f);
	strs  = split_(str_, ":");

	//let rec_dists = parse_i32_delim(strs[1], " ");
	let rec_dists = parse_i64(rm_char(strs[1], " "));

	println("rec_dists = ", rec_dists);

	let race_time = times;
	let rec_dist = rec_dists;

	println("race_time, rec_dist = ", race_time, ", ", rec_dist);

	println("calculating distances ...");

	let nwin = i64(0);
	for j in [1: race_time]
	{
		// Acceleration is 1 mm/ms/ms
		let speed = j * 1;

		let duration = race_time - j;
		let dist = i64(speed) * duration;
		//println("dist = ", dist);

		if (dist > rec_dist) nwin += i64(1);
	}
	println();

	println("nwin = ", nwin);

	prod_ *= nwin;

	close(f);

	println("part 2 = ", prod_);
	prod_;
}

//==============================================================================

fn main()
{
	println();
	println("Starting AOC syntran main");

	part1();
	part2();

	println("Ending AOC syntran main");
	println();
}

//==============================================================================

main();

//==============================================================================

