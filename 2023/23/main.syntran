
#include("../../utils.syntran");

//==============================================================================

let ifile = 1;

let filenames =
[
	"test-input.txt",
	"input.txt"
];
let filename = filenames[ifile];

//****************

let NDIM = 2; // spatial dimensions

let NDIRS = 4;

// Cardinal directions
let DIRS =
	[
		 1,  0, // east
		 0,  1, // south
		-1,  0, // west
		 0, -1  // north
		 ;
		 2,  NDIRS
	];
//println("DIRS = ", DIRS);

// Note consistent ordering with DIRS array
let NORTH = 0;
let WEST  = 1;
let SOUTH = 2;
let EAST  = 3;

//let DIRS_STR = "^<v>";
//let NSTATE = 5;
let NSTATE = 3;

// Queue data structure.  I don't have pass-by-reference but I do have
// pass-by-global-variable :)
let QUEUE_CAP = 2 * 1024 * 1024;
let STACK_CAP = 2 * 1024 * 1024;
let queue = [-1; NSTATE, QUEUE_CAP];
let queue_beg  = 0;
let queue_end  = 0;
let queue_end0 = 0;

//****************

fn sort_queue()
{
	// Quick sort
	//println("starting qsort()");
	////println("queue = ", queue);

	let l = queue_beg;
	let h = queue_end - 1;

	if (l < h)
	{
		let stack = [0; h - l + 1];

		let top = -1;

		top += 1;
		stack[top] = l;

		top += 1;
		stack[top] = h;

		while top >= 0
		{
			h = stack[top];
			top -= 1;

			l = stack[top];
			top -= 1;

			//// inlined
			//let p = partition(queue, l, h);

			// TODO: use median-of-3 pivot like other day(s)
			let x = queue[0,h];

			let i = l - 1;
			for j in [l: h]
				if queue[0,j] <= x
				{
					i += 1;
					for k in [0: NSTATE]
					{
						let tmp     = queue[k, i];
						queue[k, i] = queue[k, j];
						queue[k, j] = tmp;
					}
				}
			for k in [0: NSTATE]
			{
				let tmp       = queue[k, i+1];
				queue[k, i+1] = queue[k, h];
				queue[k, h] = tmp;
			}

			let p = i + 1;

			if p - 1 > l
			{
				top += 1;
				stack[top] = l;
			
				top += 1;
				stack[top] = p - 1;
			}

			if p + 1 < h
			{
				top += 1;
				stack[top] = p + 1;

				top += 1;
				stack[top] = h;
			}
		}
	}
	//println("queue = ", queue);

	// This could also prune popped elements entirely to avoid QUEUE_CAP issues
	//while queue[0, queue_beg] < 0 and queue_beg < queue_end
	while queue[0, queue_beg] > 0 and queue_beg < queue_end
		queue_beg += 1;

	// After sorting, new unsorted elements will be pushed onto the queue after
	// this position
	queue_end0 = queue_end;
}

//==============================================================================

let push_count = 0;
fn push_(v: [i32; :])
{
	//println("pushing ", v);
	if queue_end >= QUEUE_CAP
	{
		println();
		println("Error: QUEUE_CAP overflow!");
		println();
		exit(-1);
	}

	queue[0, queue_end ] = v[0]; // dist;
	queue[1, queue_end ] = v[1]; // x;
	queue[2, queue_end ] = v[2]; // y;
	//queue[3, queue_end ] = v[3]; // dir;
	//queue[4, queue_end ] = v[4]; // len_;

	queue_end += 1;

	//// I don't actually know if sorting the queue provides any perf benefit.
	//// Even if it does, the sort period should be tuned to the specific
	//// problem based on vibes
	//if push_count % 3000 == 0
		sort_queue();

	push_count += 1;
}

//****************

fn pop_(): [i32; :]
{
	// Linear scan because I'm not implementing a min-heap queue :(

	// queue_beg is guaranteed to be in the queue (i think)
	let i = queue_beg;
	let imin = i;
	let min_ = queue[0,i];

	// Scan only the unsorted part of the queue
	let x = [-1; NSTATE];
	i = queue_end0;
	while i < queue_end
	{
		//if queue[0,i] >= 0
		if queue[0,i] <= 0
		{
			if queue[0,i] < min_
			{
				min_ = queue[0,i];
				imin = i;
			}
		}
		i += 1;
	}
	x[0] = queue[0,imin];
	x[1] = queue[1,imin];
	x[2] = queue[2,imin];
	//x[3] = queue[3,imin];
	//x[4] = queue[4,imin];

	queue[0, imin] = +1;  // mark popped element as out of queue

	// When queue[0,:] happens to get popped, increment it to the next element
	// still in queue
	//while queue[0, queue_beg] < 0 and queue_beg < queue_end
	while queue[0, queue_beg] > 0 and queue_beg < queue_end
		queue_beg += 1;

	let ans = x;
}

//==============================================================================

//fn dijkstra(map: [str; :, :], xbeg: [i32; :], xend: [i32; :]): i32
fn dfs_longest(map: [str; :, :], xbeg: [i32; :], xend: [i32; :]): i32
{
	// Use depth-first search to find the *longest* path from xbeg to xend
	//
	// This could be optimized for this AOC problem by precomputing where the
	// *junctions* are and then only traversing a graph from
	// junction-to-junction (rather than one tile at a time)

	//println();
	//println("starting dfs_longest()");
	//println("xbeg = ", xbeg);
	//println("xend = ", xend);

	let stack_end  = 0;
	let stack = [0; NSTATE, STACK_CAP];

	let nx = size(map, 0);
	let ny = size(map, 1);

	//println("nx, ny = ", [nx, ny]);

	//let DIST_INFTY = 2000000000;

	let dist = [0; nx, ny];
	let discovered = [false ; nx, ny];

	// push
	stack[0, stack_end] = 0; // dist
	stack[1, stack_end] = xbeg[0];
	stack[2, stack_end] = xbeg[1];
	stack_end += 1;

	let dist_max = 0;

	let dist_progress = -1;

	let found = false;
	//let dist_end = DIST_INFTY;
	//while not found
	//while queue_beg < queue_end
	while stack_end > 0
	{
		// pop
		let v = [-1; NSTATE];  // temp var, not really necessary
		stack_end -= 1;
		v[0] = stack[0, stack_end];
		v[1] = stack[1, stack_end];
		v[2] = stack[2, stack_end];
		//println("v = ", v);

		// unpack from array
		let dist0 = v[0];
		let x0    = v[1];
		let y0    = v[2];

		// reset discovery for everything past v.  this is the trick that makes
		// DFS backtrack and follow *all* paths to the end instead of just one.
		// it's also a bit slow and there's probably a better solution
		for y in [0: ny]
		for x in [0: nx]
			if dist[x,y] > dist0
				discovered[x,y] = false;

		if x0 == xend[0] and y0 == xend[1]
		{
			found = true;
			//dist_end = dist0;
			//dist_end = min(dist_end, dist0);
			dist_max = max(dist_max, dist0);
			println("dist_max = ", dist_max);
		}

		let continue_ = false;

		if discovered[x0, y0]
			continue_ = true;

		//// Don't go into the forest.  Should this be checked inside the NDIRS
		//// loop below?
		//if not continue_
		//	if map[x0, y0] == "#"
		//		continue_ = true;

		if not continue_
		{
			discovered[x0, y0] = true;
			dist      [x0, y0] = dist0;
		}

		if not continue_
			for dir in [0: NDIRS]
			{
				let x = x0 + DIRS[0, dir];
				let y = y0 + DIRS[1, dir];
				if 0 <= x and x < nx and 0 <= y and y < ny
				{
					//if ((dir == EAST  and map[x, y] != "<") or
					//    (dir == WEST  and map[x, y] != ">") or
					//    (dir == NORTH and map[x, y] != "v") or
					//    (dir == SOUTH and map[x, y] != "^")) or
					//    (                 map[x, y] == ".")
					//    //(                 map[x, y] != "#")

					// Equivalent to above
					if (dir == EAST  and map[x0, y0] == ">") or
					   (dir == WEST  and map[x0, y0] == "<") or
					   (dir == NORTH and map[x0, y0] == "^") or
					   (dir == SOUTH and map[x0, y0] == "v") or
					   (                 map[x0, y0] == ".")

					if map[x, y] != "#"
					{
						// push
						stack[0, stack_end] = dist0 + 1;
						stack[1, stack_end] = x;
						stack[2, stack_end] = y;
						stack_end += 1;

						//let alt = dist0 - 1;
						//if alt < dist[x, y]
						//{
						//	push_([alt, x, y]);
						//	dist[x, y] = alt;
						//}
					}
				}
			}
	}
	let ans = dist_max;
}

//==============================================================================

fn dfs_longest2(map: [str; :, :], xbeg: [i32; :], xend: [i32; :]): i32
{
	// Use depth-first search to find the *longest* path from xbeg to xend
	//
	// This could be optimized for this AOC problem by precomputing where the
	// *junctions* are and then only traversing a graph from
	// junction-to-junction (rather than one tile at a time)

	//println();
	//println("starting dfs_longest2()");
	//println("xbeg = ", xbeg);
	//println("xend = ", xend);

	let stack_end  = 0;
	let stack = [0; NSTATE, STACK_CAP];

	let nx = size(map, 0);
	let ny = size(map, 1);

	//println("nx, ny = ", [nx, ny]);

	//let DIST_INFTY = 2000000000;

	let dist = [0; nx, ny];
	let discovered = [false ; nx, ny];

	// push
	stack[0, stack_end] = 0; // dist
	stack[1, stack_end] = xbeg[0];
	stack[2, stack_end] = xbeg[1];
	stack_end += 1;

	let dist_max = 0;

	let dist_progress = -1;

	let found = false;
	//let dist_end = DIST_INFTY;
	//while not found
	//while queue_beg < queue_end
	while stack_end > 0
	{
		// pop
		let v = [-1; NSTATE];  // temp var, not really necessary
		stack_end -= 1;
		v[0] = stack[0, stack_end];
		v[1] = stack[1, stack_end];
		v[2] = stack[2, stack_end];
		//println("v = ", v);

		// unpack from array
		let dist0 = v[0];
		let x0    = v[1];
		let y0    = v[2];

		// reset discovery for everything past v.  this is the track that makes
		// DFS backtrack and follow *all* paths to the end instead of just one.
		// it's also a bit slow and there's probably a better solution
		for y in [0: ny]
		for x in [0: nx]
			if dist[x,y] > dist0
				discovered[x,y] = false;

		if x0 == xend[0] and y0 == xend[1]
		{
			found = true;
			//dist_end = dist0;
			//dist_end = min(dist_end, dist0);
			dist_max = max(dist_max, dist0);
			println("dist_max = ", dist_max);
		}

		let continue_ = false;

		if discovered[x0, y0]
			continue_ = true;

		if not continue_
		{
			discovered[x0, y0] = true;
			dist      [x0, y0] = dist0;
		}

		if not continue_
			for dir in [0: NDIRS]
			{
				let x = x0 + DIRS[0, dir];
				let y = y0 + DIRS[1, dir];
				if 0 <= x and x < nx and 0 <= y and y < ny
				{
					if map[x, y] != "#"
					{
						// push
						stack[0, stack_end] = dist0 + 1;
						stack[1, stack_end] = x;
						stack[2, stack_end] = y;
						stack_end += 1;

						//let alt = dist0 - 1;
						//if alt < dist[x, y]
						//{
						//	push_([alt, x, y]);
						//	dist[x, y] = alt;
						//}
					}
				}
			}
	}
	let ans = dist_max;
}

//==============================================================================

fn part1(): i32
{
	let ny = countln_(filename);

	let f = open(filename);
	let str_ = readln(f);

	let nx = len(str_);

	//println("nx, ny = ", [nx, ny]);

	let grid = [""; nx, ny];

	let ybeg = 0;
	let yend = ny - 1;

	// Scan for these later
	let xbeg = -1;
	let xend = -1;

	for y in [0: ny]
	{
		//println("str_ = ", str_);

		for x in [0: nx]
			grid[x, y] = str_[x];

		if y == ybeg
			xbeg = scan(str_, ".");
		else if y == yend
			xend = scan(str_, ".");

		str_ = readln(f);
	}
	close(f);

	//println("grid = ", grid);
	//println("xbeg, xend = ", [xbeg, xend]);

	//let sum_ = -dijkstra(grid, [xbeg, ybeg], [xend, yend]);
	let sum_ = dfs_longest(grid, [xbeg, ybeg], [xend, yend]);

	println("part 1 = ", sum_);
	sum_;
}

//==============================================================================

fn part2(): i32
{
	let ny = countln_(filename);

	let f = open(filename);
	let str_ = readln(f);

	let nx = len(str_);

	//println("nx, ny = ", [nx, ny]);

	let grid = [""; nx, ny];

	let ybeg = 0;
	let yend = ny - 1;

	// Scan for these later
	let xbeg = -1;
	let xend = -1;

	for y in [0: ny]
	{
		//println("str_ = ", str_);

		for x in [0: nx]
			grid[x, y] = str_[x];

		if y == ybeg
			xbeg = scan(str_, ".");
		else if y == yend
			xend = scan(str_, ".");

		str_ = readln(f);
	}
	close(f);

	//println("grid = ", grid);
	//println("xbeg, xend = ", [xbeg, xend]);

	//let sum_ = -dijkstra(grid, [xbeg, ybeg], [xend, yend]);
	let sum_ = dfs_longest2(grid, [xbeg, ybeg], [xend, yend]);

	println("part 2 = ", sum_);
	sum_;
}

//==============================================================================

fn main()
{
	println();
	println("Starting AOC syntran main");

	//part1();  // TODO
	part2();

	println("Ending AOC syntran main");
	println();
}

//==============================================================================

main();

//==============================================================================

